# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - push
  - deploy

cache:
  paths:
    - frontend/node_modules/

build-frontend:
  stage: build
  image: node
  script:
    - cd frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - "frontend/dist/"
    when: on_success

package-frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  needs:
    - job: build-frontend
      artifacts: true
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_FRONTEND_IMAGE:$CI_COMMIT_SHORT_SHA
  script:
    - export
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile.prod"
      --no-push
      --destination "${CI_REGISTRY_IMAGE}"
      --tar-path frontend.tar
  artifacts:
    paths:
      - frontend.tar
    when: on_success

test-frontend:
  stage: test
  image: node
  script:
    - cd frontend
    - npm ci

push-frontend:
  stage: push
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  variables:
    CI_REGISTRY_IMAGE: $CI_REGISTRY_FRONTEND_IMAGE:$CI_COMMIT_SHORT_SHA
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane push frontend.tar $CI_REGISTRY_IMAGE
    - crane tag CI_REGISTRY_IMAGE latest # TODO
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        crane tag CI_REGISTRY_IMAGE latest
      fi

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - kubectl cluster-info
    - echo "Deploying application..."
    - echo "Application successfully deployed."
