"""initial

Revision ID: 51e61ec75dcf
Revises: 
Create Date: 2024-12-05 14:08:21.598244

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "51e61ec75dcf"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("rot", "blau", name="maindish").create(op.get_bind())
    sa.Enum(
        "verwaltung",
        "standortleitung",
        "gruppenleitung",
        "kuechenpersonal",
        name="usergroup",
    ).create(op.get_bind())
    op.create_table(
        "location",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("location_name", sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("location_name"),
    )
    op.create_table(
        "person",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=64), nullable=False),
        sa.Column("last_name", sa.String(length=64), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "refresh_token_session",
        sa.Column("refresh_token", sa.String(length=64), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("expires", sa.DateTime(), nullable=False),
        sa.Column("last_used", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("refresh_token"),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("username", sa.String(length=64), nullable=False),
        sa.Column("hashed_password", sa.String(length=256), nullable=False),
        sa.Column(
            "user_group",
            postgresql.ENUM(
                "verwaltung",
                "standortleitung",
                "gruppenleitung",
                "kuechenpersonal",
                name="usergroup",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("location_id", sa.UUID(), nullable=True),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("blocked", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["person.id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.add_column(
        "location", sa.Column("user_id_location_leader", sa.UUID(), nullable=False)
    )
    op.create_foreign_key(None, "location", "user", ["user_id_location_leader"], ["id"])
    op.create_table(
        "daily_order",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("person_id", sa.UUID(), nullable=False),
        sa.Column("location_id", sa.UUID(), nullable=False),
        sa.Column(
            "main_dish",
            postgresql.ENUM("rot", "blau", name="maindish", create_type=False),
            nullable=True,
        ),
        sa.Column("salad_option", sa.Boolean(), nullable=False),
        sa.Column("handed_out", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "group",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("group_name", sa.String(length=64), nullable=False),
        sa.Column("user_id_groupleader", sa.UUID(), nullable=False),
        sa.Column("user_id_replacement", sa.UUID(), nullable=True),
        sa.Column("location_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id_groupleader"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id_replacement"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "old_order",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("person_id", sa.UUID(), nullable=False),
        sa.Column("location_id", sa.UUID(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column(
            "main_dish",
            postgresql.ENUM("rot", "blau", name="maindish", create_type=False),
            nullable=True,
        ),
        sa.Column("salad_option", sa.Boolean(), nullable=False),
        sa.Column("handed_out", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pre_order",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("person_id", sa.UUID(), nullable=False),
        sa.Column("location_id", sa.UUID(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column(
            "main_dish",
            postgresql.ENUM("rot", "blau", name="maindish", create_type=False),
            nullable=True,
        ),
        sa.Column("salad_option", sa.Boolean(), nullable=False),
        sa.Column("last_changed", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["location.id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "employee",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("employee_number", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["person.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("employee")
    op.drop_table("pre_order")
    op.drop_table("old_order")
    op.drop_table("group")
    op.drop_table("daily_order")
    op.drop_table("user")
    op.drop_table("refresh_token_session")
    op.drop_table("person")
    op.drop_table("location")
    sa.Enum(
        "verwaltung",
        "standortleitung",
        "gruppenleitung",
        "kuechenpersonal",
        name="usergroup",
    ).drop(op.get_bind())
    sa.Enum("rot", "blau", name="maindish").drop(op.get_bind())
    # ### end Alembic commands ###
